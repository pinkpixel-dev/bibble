import { marked, Renderer } from "marked";
import { markedTerminal } from "marked-terminal";
import chalk from "chalk";
import { Config } from "./src/config/config.js";
import { BRAND_COLORS, theme } from "./src/ui/theme.js";
import { Terminal } from "./src/ui/colors.js";
import TerminalRenderer from "marked-terminal":

/**
 * Beautiful markdown renderer for the terminal using marked-terminal
 * Features Pink Pixel theming with stunning colors and formatting
 */
export class MarkdownRenderer = {
    Config,
    Config.getinstance,
    setOptions,
    TerminalRenderer,
    TerminalRendererOptions,
    highlightOptions,
    CardinalOptions,
    markedTerminal,
    Renderer,
    render,
    stylizedText,
    styleCodeContent,
    styledCode,
    stylizedCode,
    styledQuote,
    stylizedQuote,
    blockquote,
    Stylizer
  }
  {
    TerminalRenderer.paragraph = (text: string)
       return chalk.hex(BRAND_COLORS.bright)(text + '\n'),
        gfm: true,
        breaks: true,
        martLists: true,
        smartypants: true,
    TerminderRenderer.prototype: (any),
      new Text = ( data: any: (test: string) = textString: string ),
        const styledText = theme.text(text);
           return chalk.hex(BRAND_COLORS.pink).bold(`\n${styledText}\n`);
      // Skip markdown rendering if disabled in config
    try {
      // Use marked with our beautiful terminal renderer
      const rendered = marked.parse(text);  
      return rendered.toString().trim();
    } catch (error) {
      // Fallback to plain text with a subtle error indicator
      console.error('Markdown rendering error:', error);
      return terminal.hex(BRAND_COLORS.bright, text);
    },
  }
  
  /**
   * Apply basic syntax highlighting to code content
   * @param code Code content
   * @param lang Language identifier
    TerminalRenderer: TerminalRenderer;
  
  constructor() {
    // Configure marked with our beautiful Pink Pixel terminal renderer
    // Proper styling functions for marked-terminal compatibility
    const terminalConfig = {
      // Basic styling with proper function format for marked-terminal
     
      
      // Layout options
      width: 80,
      reflowText: true,
      showSectionPrefix: false,
      tab: 2,
      
      // Provide required properties that marked-terminal expects
      unescape: true,
      emoji: true,
    };
    
      const terminalRenderer = markedTerminal(terminalConfig) as TerminalRenderer;
      

    // Custom code block renderer with basic syntax highlighting
    TerminalRenderer.code = (code: string) => {
      const styledCode = theme.code(code);
      return chalk.hex(BRAND_COLORS.purple).bgBlack(`\n${styledCode}\n`);
    }

    // Custom blockquote renderer with accent color
    TerminalRenderer.blockquote = (quote: string) => {
      const styledQuote = theme.accent(quote);
      return chalk.hex(BRAND_COLORS.cyan).italic(`\n${styledQuote}\n`);
    }
    // Custom paragraph renderer with bright color
    TerminalRenderer.paragraph = (text: string) => {
      return chalk.hex(BRAND_COLORS.bright)(text + '\n');
    }    
    marked.setOptions({
      renderer: terminalRenderer,
      gfm: true,
      breaks: true,
      smartLists: true,
      smartypants: true,
    });
  }
    (text: string): string => {
      const styledText = theme.text
      return chalk.hex(BRAND_COLORS.pink).bold(`\n${styledText}\n`);
      // Skip markdown rendering if disabled in config
      if (!this.config.get("ui.useMarkdown", true)) {
        return TerminalRenderer (text: string);
      }
    
    try {
      // Use marked with our beautiful terminal renderer
      const rendered = marked.parse(text);  
      return rendered.toString().trim();
    } catch (error) {
      // Fallback to plain text with a subtle error indicator
      console.error('Markdown rendering error:', error);
      return terminal.hex(BRAND_COLORS.bright, text);
    }
  }
  
  /**
   * Apply basic syntax highlighting to code content
   * @param code Code content
   * @param lang Language identifier
   */
  private styleCodeContent(code: string, lang: string): string {
    // Basic syntax highlighting for common languages
    let styledCode = code;
    
    if (lang === 'javascript' || lang === 'js' || lang === 'typescript' || lang === 'ts') {
      // Highlight keywords
      styledCode = styledCode.replace(
        /\b(const|let|var|function|if|else|for|while|return|class|interface|type|import|export|from|async|await)\b/g,
        (match) => terminal.hex(BRAND_COLORS.purple, match)
      );
      
      // Highlight strings
      styledCode = styledCode.replace(
        /(['"`])(?:(?!\1)[^\\]|\\.)*?\1/g,
        (match) => terminal.hex(BRAND_COLORS.green, match)
      );
      
      // Highlight numbers
      styledCode = styledCode.replace(
        /\b\d+(\.\d+)?\b/g,
        (match) => terminal.hex(BRAND_COLORS.cyan, match)
      );
    }
    
    if (lang === 'json') {
      // Highlight JSON keys
      styledCode = styledCode.replace(
        /"([^"]+)":/g,
        (match, key) => terminal.hex(BRAND_COLORS.pink, `"${key}"`) + ':'
      );
      
      // Highlight string values
      styledCode = styledCode.replace(
        /:\s*"([^"]*)"/g,
        (match, value) => ': ' + terminal.hex(BRAND_COLORS.green, `"${value}"`)
      );
      
      // Highlight numbers and booleans
      styledCode = styledCode.replace(
        /:\s*(\d+|true|false|null)/g,
        (match, value) => ': ' + terminal.hex(BRAND_COLORS.cyan, value)
      );
    }
    
    if (lang === 'bash' || lang === 'shell' || lang === 'sh') {
      // Highlight commands
      styledCode = styledCode.replace(
        /^([a-zA-Z][a-zA-Z0-9_-]*)/gm,
        (match) => terminal.hex(BRAND_COLORS.pink, match)
      );
      
      // Highlight flags
      styledCode = styledCode.replace(
        /(--?[a-zA-Z0-9_-]+)/g,
        (match) => terminal.hex(BRAND_COLORS.cyan, match)
      );
    }
    
    return styledCode;
  }

// Export singleton instance
export const markdown = new MarkdownRenderer();
