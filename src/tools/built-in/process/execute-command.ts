/**
 * Execute Command Tool
 */

import { BuiltInTool } from '../../../ui/tool-display.js';
import { ExecuteCommandSchema, ExecuteCommandParams } from '../types/process.js';
import { safeExecuteCommand } from '../utilities/process.js';
import { withErrorHandling } from '../utilities/common.js';

export const executeCommandTool: BuiltInTool = {
  name: 'execute_command',
  description: `Execute a system command with comprehensive security checks and monitoring.

üõ°Ô∏è Security Features:
‚Ä¢ Command whitelist/blacklist enforcement based on configuration
‚Ä¢ Timeout protection to prevent runaway processes
‚Ä¢ Working directory sandboxing
‚Ä¢ Environment variable control
‚Ä¢ Output capture and size limits

‚öôÔ∏è Execution Options:
‚Ä¢ Shell mode: Enable pipes, redirects, and shell features
‚Ä¢ Direct mode: Execute programs directly (more secure)
‚Ä¢ Custom working directory and environment variables
‚Ä¢ Configurable timeout (default: 30 seconds)

üìã Common Use Cases:
‚Ä¢ Running build commands (npm, make, gradle)
‚Ä¢ Git operations (status, commit, push)
‚Ä¢ System utilities (ls, find, grep)
‚Ä¢ Development tools (linters, formatters, testers)
‚Ä¢ File operations that require shell features

‚ö†Ô∏è Security Notes:
‚Ä¢ Only allowed commands can be executed (see config.json)
‚Ä¢ Dangerous commands are blocked by default
‚Ä¢ Shell mode reduces security but enables advanced features

Examples:
‚Ä¢ Simple: { "command": "node", "args": ["--version"] }
‚Ä¢ With shell: { "command": "git log --oneline | head -5", "shell": true }
‚Ä¢ Custom env: { "command": "npm", "args": ["test"], "env": {"NODE_ENV": "test"} }`,
  category: 'process',
  parameters: ExecuteCommandSchema,
  execute: withErrorHandling(async (params: ExecuteCommandParams): Promise<any> => {
    const result = await safeExecuteCommand(
      params.command,
      params.args,
      {
        cwd: params.cwd,
        env: params.env,
        timeout: params.timeout,
        captureOutput: params.captureOutput,
        shell: params.shell
      }
    );
    
    return {
      command: params.command,
      args: params.args,
      exitCode: result.exitCode,
      stdout: result.stdout,
      stderr: result.stderr,
      duration: result.duration,
      success: result.exitCode === 0,
      options: {
        cwd: params.cwd,
        timeout: params.timeout,
        captureOutput: params.captureOutput,
        shell: params.shell
      },
      timestamp: new Date().toISOString()
    };
  })
};
